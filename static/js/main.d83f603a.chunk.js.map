{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","className","src","crossorigin","id","href","rel","target","class","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"6NAuDeA,MAnDf,WACE,OAEE,yBAAKC,UAAU,OAKb,4BAAQC,IAAI,4CAA4CC,YAAY,cACpE,6BAASF,UAAU,cAEjB,4CACA,qEAEA,yBAAKG,GAAG,mBACR,0BAAMC,KAAK,8EAA8EC,IAAI,eAE3F,uBAAGD,KAAK,iCAAiCE,OAAO,UAC9C,uBAAGC,MAAM,kBAEX,uBAAGH,KAAK,4CAA4CE,OAAO,UACzD,uBAAGC,MAAM,oBAEX,uBAAGH,KAAK,+BAA+BE,OAAO,UAC5C,uBAAGC,MAAM,oBAEX,uBAAGH,KAAK,qFAAqFE,OAAO,UAClG,uBAAGC,MAAM,kBAKb,6BAASJ,GAAG,YAAaI,MAAM,QAC/B,uBAAGH,KAAK,cAAa,+BAArB,OAEF,0BAAMJ,UAAU,YACd,yBAAKO,MAAM,eACX,yBAAKA,MAAM,eACX,yBAAKA,MAAM,eACX,iEACA,gGACA,qEACA,8GACA,wDAGF,wBAAIJ,GAAG,aAAP,gECtCcK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.d83f603a.chunk.js","sourcesContent":["import React from 'react';\r\nimport './App.css';\r\n\r\n\r\nfunction App() {\r\n  return (\r\n    \r\n    <div className=\"App\">\r\n      {/* <div class=\"topnav\">\r\n      <a href=\"#section03\"></a>\r\n      <a href=\"#section03\">I like dark mode</a>\r\n      </div>   */}\r\n      <script src=\"https://kit.fontawesome.com/959728ec6b.js\" crossorigin=\"anonymous\"></script>\r\n      <heading className=\"App-header\">\r\n\r\n        <h1 >Mihir Kakkar</h1>\r\n        <p>Nanotechnology Engineering @ UWaterloo</p>\r\n\r\n        <div id=\"part_with_icons\">\r\n        <link href=\"https://maxcdn.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css\" rel=\"stylesheet\"/>\r\n\r\n          <a href='https://github.com/MihirKakkar' target=\"_blank\">\r\n            <i class=\"fa fa-github\"></i>\r\n          </a>\r\n          <a href='https://www.linkedin.com/in/mihir-kakkar/' target=\"_blank\">\r\n            <i class=\"fa fa-linkedin\"></i>\r\n          </a>\r\n          <a href=\"mailto:m4kakkar@uwaterloo.ca\" target=\"_blank\">\r\n            <i class=\"fa fa-envelope\"></i>\r\n          </a>\r\n          <a href=\"https://drive.google.com/file/d/1npBG6bOqbP-ADFON7Frr-57IHJwqWj53/view?usp=sharing\" target=\"_blank\" >\r\n            <i class=\"fa fa-file\"></i>\r\n          </a>\r\n        </div>\r\n      </heading>\r\n      \r\n        <section id=\"section02\"  class=\"demo\">\r\n        <a href=\"#section03\"><span></span>:D</a></section>\r\n      \r\n      <body className=\"App-body\">\r\n        <div class=\"star star1\"></div>\r\n        <div class=\"star star2\"></div>\r\n        <div class=\"star star3\"></div>\r\n        <h2>Hey there, I'm Mihir ðŸ‘‹</h2>\r\n        <p2>I'm an engineering student with a passion for making new things.</p2>\r\n        <p2>Currently a Data Engineer for Cuberg.</p2>\r\n        <p2>Looking for 4-month or 8-month internship opportunities starting January 2022.</p2>\r\n        <p2>Feel free to reach out!</p2>\r\n      </body>\r\n      \r\n      <p3 id=\"section03\">Made with ðŸ’– by Mihir || Last Updated April 2021</p3>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}